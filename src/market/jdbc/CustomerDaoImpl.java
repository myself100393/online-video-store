/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package market.jdbc;

import market.dao.*;
import market.factory.*;
import java.util.Date;
import market.dto.*;
import market.exceptions.*;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CustomerDaoImpl extends AbstractDAO implements CustomerDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, firstName, LastName, email, state, lastLogin, password, userName,account_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	//protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, firstName, LastName, email, state, lastLogin, password, userName ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( firstName, LastName, email, state,  password, userName, account_id ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	//protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, firstName = ?, LastName = ?, email = ?, state = ?, lastLogin = ?, password = ?, userName = ? WHERE id = ?";
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET  firstName = ?, LastName = ?, email = ?, state = ?,  password = ?, userName = ?, account_id = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column firstName
	 */
	protected static final int COLUMN_FIRST_NAME = 2;

	/** 
	 * Index of column LastName
	 */
	protected static final int COLUMN_LAST_NAME = 3;

	/** 
	 * Index of column email
	 */
	protected static final int COLUMN_EMAIL = 4;

	/** 
	 * Index of column state
	 */
	protected static final int COLUMN_STATE = 5;

	/** 
	 * Index of column lastLogin
	 */
	protected static final int COLUMN_LAST_LOGIN = 6;

	/** 
	 * Index of column password
	 */
	protected static final int COLUMN_PASSWORD = 7;

	/** 
	 * Index of column userName
	 */
	protected static final int COLUMN_USER_NAME = 8;
	protected static final int COLUMN_ACCOUNT_ID = 9;
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the Customer table.
	 */
	public CustomerPk insert(Customer dto) throws CustomerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			//stmt.setString( index++, dto.getId() );
			stmt.setString( index++, dto.getFirstName() );
			stmt.setString( index++, dto.getLastName() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setInt( index++, dto.getState() );
			//stmt.setDate(index++, dto.getLastLogin()==null ? new java.sql.Date( System.currentTimeMillis() ) : new java.sql.Date( dto.getLastLogin().getTime() ) );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getUserName() );
			stmt.setInt( index++, dto.getAccountId() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();		
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		 
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the Customer table.
	 */
	public void update( Customer dto) throws CustomerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			//stmt.setString( index++, dto.getId() );
			stmt.setString( index++, dto.getFirstName() );
			stmt.setString( index++, dto.getLastName() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setInt( index++, dto.getState() );

			//stmt.setDate(index++, dto.getLastLogin() ); //Db set to auto update current time
			
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getUserName() );
			stmt.setInt( index++, dto.getAccountId());
			
			stmt.setInt( index++, dto.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the Customer table.
	 */
	public void delete(CustomerPk pk) throws CustomerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the Customer table that matches the specified primary-key value.
	 */
	public Customer findByPrimaryKey(CustomerPk pk) throws CustomerDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the Customer table that match the criteria 'id = :id'.
	 */
	public Customer findByPrimaryKey(int id) throws CustomerDaoException
	{
		Customer ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] { id } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the Customer table that match the criteria ''.
	 */
	public Customer[] findAll() throws CustomerDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the Customer table that match the criteria ''.
	 */
	public Customer findByUserName(String userName) throws CustomerDaoException
	{
		Customer ret[] = findByDynamicSelect( SQL_SELECT + " WHERE username = ?", new Object[] { userName } );
		return ret.length==0 ? null : ret[0];
	}

	/**
	 * Method 'CustomerDaoImpl'
	 * 
	 */
	public CustomerDaoImpl()
	{
	}

	/**
	 * Method 'CustomerDaoImpl'
	 * 
	 * @param userConn
	 */
	public CustomerDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "Customer";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Customer fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Customer dto = new Customer();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Customer[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Customer dto = new Customer();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Customer ret[] = new Customer[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Customer dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setFirstName( rs.getString( COLUMN_FIRST_NAME ) );
		dto.setLastName( rs.getString( COLUMN_LAST_NAME ) );
		dto.setEmail( rs.getString( COLUMN_EMAIL ) );
		dto.setState( rs.getInt( COLUMN_STATE ) );
		dto.setLastLogin( rs.getDate(COLUMN_LAST_LOGIN ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setUserName( rs.getString( COLUMN_USER_NAME ) );
		dto.setAccountId(rs.getInt( COLUMN_ACCOUNT_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Customer dto)
	{
	}

	/** 
	 * Returns all rows from the Customer table that match the specified arbitrary SQL statement
	 */
	public Customer[] findByDynamicSelect(String sql, Object[] sqlParams) throws CustomerDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the Customer table that match the specified arbitrary SQL statement
	 */
	public Customer[] findByDynamicWhere(String sql, Object[] sqlParams) throws CustomerDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		 
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

 
	

}
